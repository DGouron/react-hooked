---
import { Code } from 'astro:components';
import DocsLayout from '../../layouts/DocsLayout.astro';
import AlertBox from '../../components/AlertBox.astro';
import PackageCommand from '../../components/PackageCommand.astro';
import { extractHookName } from '../../utils/hooks';
import jsDoc2JSON from '../../utils/jsdoc2json.ts';
import CodeBox from '../../components/CodeBox.astro';

export async function getStaticPaths() {
  const hooks: Record<string, string> = import.meta.glob('/src/hooks/*.ts', {query: '?raw', eager: true, import: 'default'});
  return Object.keys(hooks).map((hook) => {
    const hookName = extractHookName(hook);
    const doc = jsDoc2JSON(hooks[hook]);
    return {
      params: { hook: hookName },
      props: { hook: hooks[hook], hookName, doc },
    }
  });

}

const {hookName, hook, doc } = Astro.props;

const requiredPackages = doc.tags.filter((el) => el.tag === "requires" && el.type === "package");
const requiredLocals = doc.tags.filter((el) => el.tag === "requires" && el.type === "local");
---
<DocsLayout title={hookName} selectedPage={hookName}>
  <h1 class="text-3xl mb-4">{hookName}</h1>
  <p class="mb-6">{doc.description}</p>
{requiredPackages.length > 0 && (
    <AlertBox>
    <div slot="icon">
      <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 fill-current" viewBox="0 0 256 256"><rect width="256" height="256" fill="none"/><circle cx="128" cy="128" r="96" fill="none" stroke="currentColor" stroke-miterlimit="10" stroke-width="16"/><line x1="128" y1="136" x2="128" y2="80" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"/><circle cx="128" cy="172" r="12"/></svg>
    </div>
    <div slot="title">
      This hook requires the following packages:
      <span class="text-ctp-crust font-semibold">
        {requiredPackages.map(requiredPackages => (
          <a href={`https://www.npmjs.com/package/${requiredPackages.description}`} class="mr-1 text-ctp-crust font-semibold hover:underline" target="_blank">{requiredPackages.description}</a>
        ))}
      </span>
    </div>
    <div class="mt-4">
      <PackageCommand packageNames={requiredPackages.map(p => p.description ?? "")} />
    </div>
    </AlertBox>
)}
  {requiredLocals.length > 0 && (
    <AlertBox>
    <div slot="icon">
    <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 fill-current" viewBox="0 0 256 256"><rect width="256" height="256" fill="none"/><circle cx="128" cy="128" r="96" fill="none" stroke="currentColor" stroke-miterlimit="10" stroke-width="16"/><line x1="128" y1="136" x2  ="128" y2="80" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"/><circle cx="128" cy="172" r="12"/></svg>
    </div>
    <div slot="title">
      This hook requires the following hooks:
      <span class="text-ctp-crust font-semibold">
        {requiredLocals.map(requiredLocals => (
          <a href={`/docs/${requiredLocals.description}`} class="mr-1 text-ctp-crust font-semibold hover:underline" target="_blank">{requiredLocals.description?.split("./")[1]}</a>
        ))}
      </span>
    </div>
    </AlertBox>
)}
  <CodeBox code={hook.trim()} lang="ts" class="rounded-xl shadow-xl" />

  <div class="mt-12 text-center">
    <button data-action="download" class="bg-ctp-blue hover:bg-ctp-pink text-ctp-base text-xl py-4 px-8 rounded-lg inline-flex items-center transition-all shadow hover:shadow-lg">
      <svg class="fill-current w-6 h-6 mr-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 256">
        <rect width="256" height="256" fill="none"/>
        <path d="M200,224H56a8,8,0,0,1-8-8V40a8,8,0,0,1,8-8h96l56,56V216A8,8,0,0,1,200,224Z" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"/>
        <polyline points="152 32 152 88 208 88" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"/>
        <line x1="128" y1="120" x2="128" y2="184" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"/>
        <polyline points="104 160 128 184 152 160" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"/>
      </svg>
      <span>Download</span>
    </button>
  </div>


  <script define:vars={{ hookName, hook }}>
    // Download button
    const downloadButtons = document.querySelectorAll('[data-action="download"]');
    downloadButtons.forEach(downloadButton => {
      downloadButton.addEventListener('click', () => {
        const blob = new Blob([hook.trim()], { type: 'text/plain' }); 
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${hookName}.ts`;
        a.click();
        URL.revokeObjectURL(url);
      });
    });
  </script>


</DocsLayout>

