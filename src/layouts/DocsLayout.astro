---
import { ViewTransitions } from 'astro:transitions';
import MobileNavbar from "../components/nav/MobileNavbar.astro";
import Navbar from "../components/nav/Navbar.astro";
import { getHooksNames } from "../utils/hooks";

interface Props {
  title: string;
  selectedPage: string;
}

const hookNames = getHooksNames();
const { title, selectedPage } = Astro.props;
---
<html lang="fr">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="/style.css" />
    <title>{title} - React Hooked</title>
    <ViewTransitions />
  </head>
  <body class="dark:ctp-mocha ctp-latte bg-ctp-base text-ctp-text antialiased">
    <div class="">
      <div class="sticky top-0 z-10 border-b border-zinc-950/10 bg-ctp-mantle px-6 py-5 sm:px-8 lg:z-10 lg:flex lg:h-16 lg:items-center lg:py-0">
        <div class="mx-auto flex w-full max-w-xl items-center justify-between lg:max-w-7xl">
          <div class="flex items-center gap-2 sm:gap-8">
            <a aria-label="Home" href="/" class="font-bold">React Hooked ü™ù</a>
            <a class="text-sm/6 font-medium hover:underline" href="/docs">Docs</a>
          </div>
          <div class="flex items-center gap-4 sm:gap-8">
            <button id="themeToggle" class="text-sm/6 font-medium">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 256" class="w-6 h-6 dark:hidden"><rect width="256" height="256" fill="none"/><line x1="128" y1="40" x2="128" y2="16" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"/><circle cx="128" cy="128" r="56" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"/><line x1="64" y1="64" x2="48" y2="48" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"/><line x1="64" y1="192" x2="48" y2="208" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"/><line x1="192" y1="64" x2="208" y2="48" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"/><line x1="192" y1="192" x2="208" y2="208" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"/><line x1="40" y1="128" x2="16" y2="128" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"/><line x1="128" y1="216" x2="128" y2="240" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"/><line x1="216" y1="128" x2="240" y2="128" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"/></svg>
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 256" class="w-6 h-6 hidden dark:block"><rect width="256" height="256" fill="none"/><path d="M108.11,28.11A96.09,96.09,0,0,0,227.89,147.89,96,96,0,1,1,108.11,28.11Z" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"/></svg>
            </button>
          </div>
        </div>
        <MobileNavbar items={hookNames} selectedPage={selectedPage} />
      </div>
    <div class="px-6 lg:px-8">    
      <div class="mx-auto max-w-xl lg:max-w-7xl">
        <div class="mx-auto flex max-w-xl items-start gap-x-12 lg:max-w-7xl">
            <Navbar items={hookNames} selectedPage={selectedPage} />
          <main class="min-w-0 flex-1 gap-x-12 pb-16 pt-8 lg:pt-12">
            <slot /> 
          </main>
        </div>
      </div>
    <article>
    </article>
</div>
</div>
    <!-- <Footer /> -->
  </body>

  <script>

    const theme = (() => {
      if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
        return localStorage.getItem("theme");
      }
      if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
        return "dark";
      }
      return "light";
    })();

    if (theme === "light") {
      document.documentElement.classList.remove("dark");
    } else {
      document.documentElement.classList.add("dark");
    }

    window.localStorage.setItem("theme", theme);

    const handleToggleClick = () => {
      const element = document.documentElement;
      element.classList.toggle("dark");

      const isDark = element.classList.contains("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    };

    document
      .getElementById("themeToggle")
      .addEventListener("click", handleToggleClick);


    document.addEventListener("astro:after-swap", () => {
      if (localStorage.getItem("theme") === "dark")
        document.documentElement.classList.toggle("dark", true);

      if (!document.getElementById("themeToggle").hasAttribute("onclick"))
        document
          .getElementById("themeToggle")
          .addEventListener("click", handleToggleClick);
    });

  </script>
</html>
